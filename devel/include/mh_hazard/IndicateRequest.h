// Generated by gencpp from file mh_hazard/IndicateRequest.msg
// DO NOT EDIT!


#ifndef MH_HAZARD_MESSAGE_INDICATEREQUEST_H
#define MH_HAZARD_MESSAGE_INDICATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace mh_hazard
{
template <class ContainerAllocator>
struct IndicateRequest_
{
  typedef IndicateRequest_<ContainerAllocator> Type;

  IndicateRequest_()
    : point()  {
    }
  IndicateRequest_(const ContainerAllocator& _alloc)
    : point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::mh_hazard::IndicateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mh_hazard::IndicateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IndicateRequest_

typedef ::mh_hazard::IndicateRequest_<std::allocator<void> > IndicateRequest;

typedef boost::shared_ptr< ::mh_hazard::IndicateRequest > IndicateRequestPtr;
typedef boost::shared_ptr< ::mh_hazard::IndicateRequest const> IndicateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mh_hazard::IndicateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mh_hazard::IndicateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mh_hazard::IndicateRequest_<ContainerAllocator1> & lhs, const ::mh_hazard::IndicateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mh_hazard::IndicateRequest_<ContainerAllocator1> & lhs, const ::mh_hazard::IndicateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mh_hazard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mh_hazard::IndicateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mh_hazard::IndicateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mh_hazard::IndicateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47dfdbd810b48d0a47b7ad67e4191bcc";
  }

  static const char* value(const ::mh_hazard::IndicateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47dfdbd810b48d0aULL;
  static const uint64_t static_value2 = 0x47b7ad67e4191bccULL;
};

template<class ContainerAllocator>
struct DataType< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mh_hazard/IndicateRequest";
  }

  static const char* value(const ::mh_hazard::IndicateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PointStamped point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mh_hazard::IndicateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IndicateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mh_hazard::IndicateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mh_hazard::IndicateRequest_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MH_HAZARD_MESSAGE_INDICATEREQUEST_H
