// Generated by gencpp from file mh_hazard/WhisperRequest.msg
// DO NOT EDIT!


#ifndef MH_HAZARD_MESSAGE_WHISPERREQUEST_H
#define MH_HAZARD_MESSAGE_WHISPERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace mh_hazard
{
template <class ContainerAllocator>
struct WhisperRequest_
{
  typedef WhisperRequest_<ContainerAllocator> Type;

  WhisperRequest_()
    : string()
    , context()  {
    }
  WhisperRequest_(const ContainerAllocator& _alloc)
    : string(_alloc)
    , context(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _string_type;
  _string_type string;

   typedef  ::std_msgs::String_<ContainerAllocator>  _context_type;
  _context_type context;





  typedef boost::shared_ptr< ::mh_hazard::WhisperRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mh_hazard::WhisperRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WhisperRequest_

typedef ::mh_hazard::WhisperRequest_<std::allocator<void> > WhisperRequest;

typedef boost::shared_ptr< ::mh_hazard::WhisperRequest > WhisperRequestPtr;
typedef boost::shared_ptr< ::mh_hazard::WhisperRequest const> WhisperRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mh_hazard::WhisperRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mh_hazard::WhisperRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mh_hazard::WhisperRequest_<ContainerAllocator1> & lhs, const ::mh_hazard::WhisperRequest_<ContainerAllocator2> & rhs)
{
  return lhs.string == rhs.string &&
    lhs.context == rhs.context;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mh_hazard::WhisperRequest_<ContainerAllocator1> & lhs, const ::mh_hazard::WhisperRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mh_hazard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mh_hazard::WhisperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mh_hazard::WhisperRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mh_hazard::WhisperRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56ff655a55063e10ba79099d30d2e47c";
  }

  static const char* value(const ::mh_hazard::WhisperRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56ff655a55063e10ULL;
  static const uint64_t static_value2 = 0xba79099d30d2e47cULL;
};

template<class ContainerAllocator>
struct DataType< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mh_hazard/WhisperRequest";
  }

  static const char* value(const ::mh_hazard::WhisperRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String string\n"
"std_msgs/String context\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::mh_hazard::WhisperRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.string);
      stream.next(m.context);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhisperRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mh_hazard::WhisperRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mh_hazard::WhisperRequest_<ContainerAllocator>& v)
  {
    s << indent << "string: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.string);
    s << indent << "context: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.context);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MH_HAZARD_MESSAGE_WHISPERREQUEST_H
